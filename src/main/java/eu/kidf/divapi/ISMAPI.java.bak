/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.kidf.smapi;

import java.util.Objects;

/**
 * Semantic Matching API
 * This interface defines access methods to background knowledge
 * typically needed by ontology matchers.
 * 
 * Main elements:
 *  - Resource: a background knowledge resource, e.g., WordNet
 *  - Language: a three-letter ISO-639-3 language code, e.g., "eng", "ita"
 *  - Domain:   an English string label identifying a domain, e.g., "Medicine"
 *  - Word:     a lemma (canonical form of a word), e.g., "play", "jouer"
 *  - Meaning:  a string-based identifier of a meaning (concept/sense/synset/etc.)
 *              within a specific resource
 *  - Relation: a semantic relation between two meanings within the same resource
 *              or across two resources
 * 
 * @author gabor
 */
public interface ISMAPI {
    
    public class Relation {
        
        boolean isReflexive;
        boolean isSymmetric;
        boolean isTransitive;
        
        public Relation(boolean isReflexive, boolean isSymmetric, boolean isTransitive) {
            this.isReflexive = isReflexive;
            this.isSymmetric = isSymmetric;
            this.isTransitive = isTransitive;
        }
        
        public boolean isReflexive() { return isReflexive; }
        public boolean isSymmetric() { return isSymmetric; }
        public boolean isTransitive() { return isTransitive; }
    }
   
    public final Relation EQUIVALENCE = new Relation(true, true, true);
    public final Relation SENSE_AXIS = new Relation(true, true, true);
    public final Relation SUBSUMPTION = new Relation(false, false, true);
    public final Relation PART_OF = new Relation(false, false, true);
    public final Relation SIMILAR_TO = new Relation(true, true, false);
    public final Relation RELATED_TO = new Relation(false, true, true);
    
    /*******************************************************
     * Resource-specific methods.
     * These methods return results from a single resource
     * specified in the input.
     *******************************************************/
    
    String[] getWords(Meaning meaning);
    Meaning[] getMeanings(Object resource, String word);
    String[] getSynonyms(Object resource, String word);
    Meaning[] getRelatedMeanings(Meaning meaning, Relation[] relations);
    Relation[] getRelations(Meaning m1, Meaning m2);

    /*******************************************************
     * Domain-specific methods.
     * These methods return results from multiple resources
     * within a single domain and language.
     *******************************************************/

    Object[] getResources(String language, String domain);
    Meaning[] getMeanings(String language, String domain, String word);
    String[] getSynonyms(String language, String domain, String word);
    
    /*******************************************************
     * Trans-domain methods.
     * These methods access multiple resources
     * from multiple domains within a single language.
     *******************************************************/
    
    String getLanguage(Object resource);
    String[] getDomains(Object resource);
    String[] getDomains(String word);
    Meaning[] getMeanings(String language, String word);
}
